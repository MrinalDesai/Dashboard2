import pandas as pd
import streamlit as st
import plotly.express as px
from PIL import Image
import plotly.graph_objects as go
from plotly.subplots import make_subplots


#st.title('Motorised vehicle developments')
st.header('Financial aspects', divider="gray")
st.write(""" This section focuses on the Financial aspect of Metro and vatious sources of revenues, fines, taxes etc of Railways and STRU.

The Introduction of Tatkal etc have curbed some of the losses but has not been sufficient.

""")

st.subheader("#Ô∏è‚É£Metro Rail  Regional Rapid Transit System Projectsüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Year-wise Details of Budget Estimates Funds Released and Utilized for Metro Rail  Regional Rapid Transit System Projects in the Country from 2017-18 to 2022-23üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

df_funds_Metro=pd.read_csv(f'datasets/finan/Year-wise Details of Budget Estimates Funds Released and Utilized for Metro Rail  Regional Rapid Transit System Projects in the Country from 2017-18 to 2022-23.csv')




fig_funds_Metro = go.Figure(data=[go.Table(
    columnwidth = [100,500,500,500],
    header=dict(values=list(df_funds_Metro.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=14, color="black"),
                align='left'),
    cells=dict(values=df_funds_Metro.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=14, color="black"),
               align='left'))
])
# Add fig_subure title
fig_funds_Metro.update_layout(
    title_text="Funds Released/Utilized for Metro Rail Regional Rapid Transit Projects"
)
st.plotly_chart(fig_funds_Metro)



##############################################################################################################
st.subheader("#Ô∏è‚É£Metro Rail  Regional Rapid Transit System Projectsüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Metro Rail Corporation Name-wise Details of the Revenue Generated by various Metro Rail Corporationsüìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")


df_metro_revenue=pd.read_csv(f'datasets/finan/Metro Rail Corporation Name-wise Details of the Revenue Generated by various Metro Rail Corporations (in Reply to Unstarred Question on 03 April, 2023).csv')




fig_metro_revenue = go.Figure(data=[go.Table(
    columnwidth = [100,500,500],
    header=dict(values=list(df_metro_revenue.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=14, color="black"),
                align='left'),
    cells=dict(values=df_metro_revenue.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=14, color="black"),
               align='left'))
])
# Add fig_subure title
fig_metro_revenue.update_layout(
    title_text="Revenue Generated by various Metro Rail Corporations"
)
st.plotly_chart(fig_metro_revenue)



##############################################################################################################
st.subheader("#Ô∏è‚É£Year-wise Revenue Realised from Road Transport (Centre) from 2009-10 to 2018-19üìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Revenue Realised from Road Transportüìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")



def highlight_max(x):
    return ['font-weight: bold' if v == x.loc[4] else ''
                for v in x]

df_road_revenue=pd.read_csv(f'datasets/finan/Year-wise Revenue Realised from Road Transport (Centre) from 2009-10 to 2018-19.csv')

df_road_revenue.style.apply(highlight_max)


fig_road_revenue = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_road_revenue.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=8, color="black"),
                align='left'),
    cells=dict(values=df_road_revenue.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=8, color="black"),
               align='left'))
])
# Add fig_subure title
fig_road_revenue.update_layout(
    title_text="Revenue Realised from Road Transport (Centre) lakhs"
)
st.plotly_chart(fig_road_revenue)


############################################################################################
st.subheader("#Ô∏è‚É£Year-wise Revenue Realised from Road Transportüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Year-wise Revenue Realised from Road Transport (States) from 1950-51 to 2020-21üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")



import plotly.graph_objs as go
df_road_tax_S = pd.read_csv(f'datasets/finan/Year-wise Revenue Realised from Road Transport (States) from 1950-51 to 2020-21.csv')
x_data = str("Y-")+df_road_tax_S['Year']
y_data_1 = df_road_tax_S['Motor Vehicles Taxes and Fees']
y_data_2 = df_road_tax_S['SalesTax/VAT on Motor Spirit and Lubricants']
y_data_3 = df_road_tax_S['Tax on Passengers and Goods']
y_data_4 = df_road_tax_S['Total']


trace_1 = go.Scatter(x=x_data, y=y_data_1, mode='lines', name='Motor Vehicles Taxes and Fees')
trace_2 = go.Scatter(x=x_data, y=y_data_2, mode='lines', name='SalesTax/VAT on Motor Spirit and Lubricants')
trace_3 = go.Scatter(x=x_data, y=y_data_3, mode='lines', name='Tax on Passengers and Goods')
trace_4 = go.Scatter(x=x_data, y=y_data_4, mode='lines', name='Total')

fig_road_tax_S = go.Figure([
    trace_1, trace_2,trace_3,trace_4
])
fig_road_tax_S.update_layout(
    title = 'Revenue Realised from Road Transport (States) from 1950-21',
    width = 1100,
    xaxis_title = 'Duration',
    yaxis_title = 'Tax'
)

st.plotly_chart(fig_road_tax_S)


############################################################################################

st.subheader("#Ô∏è‚É£Year-wise Revenue Realised from Road Transport (Centre)üìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Year-wise Revenue Realised from Road Transport (Centre) from 2009-10 to 2018-19üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

import plotly.graph_objs as go
df_road_tax_c = pd.read_csv(f'datasets/finan/Year-wise Revenue Realised from Road Transport (Centre) from 2009-10 to 2018-19.csv')
x_data_c = df_road_tax_c['Year']

y_data_1_c = df_road_tax_c['Motor Vehicles & Accessories - Import Duty']
y_data_2_c = df_road_tax_c['Motor Vehicles & Accessories - Excise Duty']
y_data_3_c = df_road_tax_c['Motor Vehicles & Accessories - Total']
y_data_4_c = df_road_tax_c['Tyres & Tubes - Import Duty']
y_data_5_c = df_road_tax_c['Tyres & Tubes - Excise Duty']
y_data_6_c = df_road_tax_c['Tyres & Tubes - Total']
y_data_7_c = df_road_tax_c['High Speed Diesel Oil - Import Duty']
y_data_8_c = df_road_tax_c['High Speed Diesel Oil - Excise Duty']
y_data_9_c = df_road_tax_c['High Speed Diesel Oil - Total']
y_data_10_c = df_road_tax_c['Motor Spirit - Import Duty']
y_data_11_c = df_road_tax_c['Motor Spirit - Excise Duty']
y_data_12_c = df_road_tax_c['Motor Spirit - Total']
y_data_13_c = df_road_tax_c['Total']


trace_1_c = go.Scatter(x=x_data_c, y=y_data_1_c, mode='lines', name='Motor Vehicles & Accessories - Import Duty')
trace_2_c = go.Scatter(x=x_data_c, y=y_data_2_c, mode='lines', name='Motor Vehicles & Accessories - Excise Duty')
trace_3_c = go.Scatter(x=x_data_c, y=y_data_3_c, mode='lines', name='Motor Vehicles & Accessories - Total')
trace_4_c = go.Scatter(x=x_data_c, y=y_data_4_c, mode='lines', name='Tyres & Tubes - Import Duty')
trace_5_c = go.Scatter(x=x_data_c, y=y_data_5_c, mode='lines', name='Tyres & Tubes - Excise Duty')
trace_6_c = go.Scatter(x=x_data_c, y=y_data_6_c, mode='lines', name='Tyres & Tubes - Total')
trace_7_c = go.Scatter(x=x_data_c, y=y_data_7_c, mode='lines', name='High Speed Diesel Oil - Import Duty')
trace_8_c = go.Scatter(x=x_data_c, y=y_data_8_c, mode='lines', name='High Speed Diesel Oil - Excise Duty')
trace_9_c = go.Scatter(x=x_data_c, y=y_data_9_c, mode='lines', name='High Speed Diesel Oil - Total')
trace_10_c = go.Scatter(x=x_data_c, y=y_data_10_c, mode='lines', name='Motor Spirit - Import Duty')
trace_11_c = go.Scatter(x=x_data_c, y=y_data_11_c, mode='lines', name='Motor Spirit - Excise Duty')
trace_12_c = go.Scatter(x=x_data_c, y=y_data_12_c, mode='lines', name='Motor Spirit - Total')
trace_13_c = go.Scatter(x=x_data_c, y=y_data_13_c, mode='lines', name='Total')

fig_road_tax_c = go.Figure([
    trace_1_c, trace_2_c,trace_3_c,trace_4_c,trace_5_c,trace_6_c,trace_7_c,trace_8_c,trace_9_c,trace_10_c,trace_11_c,trace_12_c,trace_13_c
])
fig_road_tax_c.update_layout(
    title = 'Revenue Realised Road Transport (Centre) 2009-19',
    width = 1500,
    
    xaxis_title = 'Duration',
    yaxis_title = 'Tax'
)

st.plotly_chart(fig_road_tax_c)


############################################################################################

st.subheader("#Ô∏è‚É£Vehicular Fines Imposed during 2021 and 2022üìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£State-wise Vehicular Fines Imposed during 2021 and 2022üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")


df_vh_fine=pd.read_csv(f'datasets/finan/State-wise Details of the Vehicular Fines Imposed during 2021 and 2022.csv')




fig_vh_fine = go.Figure(data=[go.Table(
    columnwidth = [200,500,500],
    header=dict(values=list(df_vh_fine.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=14, color="black"),
                align='left'),
    cells=dict(values=df_vh_fine.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=14, color="black"),
               align='left'))
])
# Add fig_subure title
fig_vh_fine.update_layout(
    title_text="State-wise Vehicular Fines Imposed 2021-22"
)
st.plotly_chart(fig_vh_fine)

############################################################################################
st.subheader("#Ô∏è‚É£Revenue from Taxes on Motor Vehicle and Passenger and Goods and Percentage Shareüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£StatesUTs-wise Revenue from Taxes on Motor Vehicle and Passenger and Goods and Percentage Share from 2019-20 to 2020-21üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

df_vh_gd_tax=pd.read_csv(f'datasets/finan/StatesUTs-wise Revenue from Taxes on Motor Vehicle and Passenger and Goods and Percentage Share from 2019-20 to 2020-21.csv')




fig_vh_gd_tax = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_vh_gd_tax.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=8, color="black"),
                align='left'),
    cells=dict(values=df_vh_gd_tax.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=8, color="black"),
               align='left'))
])
# Add fig_subure title
fig_vh_gd_tax.update_layout(
    title_text="Revenue-Taxes (Motor Vehicle/Passenger/Goods)/Perc Share 2019-21"
)
st.plotly_chart(fig_vh_gd_tax)


############################################################################################
st.subheader("#Ô∏è‚É£Financial Position Of Indian Railwaysüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Financial Position Of Indian Railways From 2006-07 to 2012-2013üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

df_finpos_rail=pd.read_excel(f'datasets/finan/Financial Position Of Indian Railways From 2006-07 to 2012-2013.xls')




fig_finpos_rail = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_finpos_rail.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=8, color="black"),
                align='left'),
    cells=dict(values=df_finpos_rail.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=8, color="black"),
               align='left'))
])
# Add fig_subure title
fig_finpos_rail.update_layout(
    title_text="Financial Position Of Indian Railways From 2006-2013"
)
st.plotly_chart(fig_finpos_rail)


############################################################################################
st.subheader("#Ô∏è‚É£Losses In Passenger Services Of Indian Railwaysüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Losses In Passenger Services Of Indian Railways 2004-2011üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

df_loss_rail=pd.read_excel(f'datasets/finan/Losses In Passenger Services Of Indian Railways.xls')




fig_loss_rail = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_loss_rail.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=15, color="black"),
                align='left'),
    cells=dict(values=df_loss_rail.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=15, color="black"),
               align='left'))
])
# Add fig_subure title
fig_loss_rail.update_layout(
    title_text="Losses In Passenger Services Of Indian Railways"
)
st.plotly_chart(fig_loss_rail)



############################################################################################
st.subheader("#Ô∏è‚É£All India level Details of Gross Traffic Earnings of Railwaysüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£All India level Details of Gross Traffic Earnings of Railways from 2001-02 to 2014-15üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

df_gross_tra_ear=pd.read_csv(f'datasets/finan/All India level Details of Gross Traffic Earnings of Railways from 2001-02 to 2014-15.csv')




df_gross_tra_ear.drop(['Category'], axis=1,inplace=True)
df_gross_tra_ear = df_gross_tra_ear.T
df_gross_tra_ear=df_gross_tra_ear.rename(columns=df_gross_tra_ear.iloc[0]).drop(df_gross_tra_ear.index[0])
df_gross_tra_ear['Year'] = df_gross_tra_ear.index
df_gross_tra_ear=df_gross_tra_ear.reset_index(drop=True)


x_gross_tra_ear = df_gross_tra_ear['Year']


y_data_1_gross_tra_ear = df_gross_tra_ear['1. Coaching Earnings:']
y_data_2_gross_tra_ear = df_gross_tra_ear['(A) Passenger earnings']
y_data_3_gross_tra_ear = df_gross_tra_ear['(B) Other coaching earnings']
y_data_4_gross_tra_ear = df_gross_tra_ear['2. Goods earnings (1)']
y_data_5_gross_tra_ear = df_gross_tra_ear['3. Other miscellaneous earnings(Excluding Rent& Toll)']
y_data_6_gross_tra_ear = df_gross_tra_ear['Total gross earnings(Icluding rent & toll)']


trace_1_gross_tra_ear = go.Scatter(x=x_data, y=y_data_1_c, mode='lines', name='1. Coaching Earnings:')
trace_2_gross_tra_ear = go.Scatter(x=x_data, y=y_data_2_c, mode='lines', name='(A) Passenger earnings')
trace_3_gross_tra_ear = go.Scatter(x=x_data, y=y_data_3_c, mode='lines', name='(B) Other coaching earnings')
trace_4_gross_tra_ear = go.Scatter(x=x_data, y=y_data_4_c, mode='lines', name='2. Goods earnings (1)')
trace_5_gross_tra_ear = go.Scatter(x=x_data, y=y_data_5_c, mode='lines', name='3. Other miscellaneous earnings(Excluding Rent& Toll)')
trace_6_gross_tra_ear = go.Scatter(x=x_data, y=y_data_6_c, mode='lines', name='Total gross earnings(Icluding rent & toll)')


fig_gross_tra_ear = go.Figure([
    trace_1_c, trace_2_c,trace_3_c,trace_4_c,trace_5_c,trace_6_c
])
fig_gross_tra_ear.update_layout(
    title = 'Details of Gross Traffic Earnings of Railways from 2001-02 to 2014-15',
    width = 1100,
    xaxis_title = 'Duration',
    yaxis_title = 'Tax'
)

st.plotly_chart(fig_gross_tra_ear)



############################################################################################
st.subheader("#Ô∏è‚É£Revenue Earned by Indian Railways Catering and Tourism Corporation (IRCTC)üìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Year-wise Details of Total Revenue Earned by Indian Railways Catering and Tourism Corporation (IRCTC) by Selling the Food and Beverages from 2019-20 to 2021-22üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")


df_catering=pd.read_csv(f'datasets/finan/Year-wise Details of Total Revenue Earned by Indian Railways Catering and Tourism Corporation (IRCTC) by Selling the Food and Beverages from 2019-20 to 2021-22.csv')


fig_catering = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_catering.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=15, color="black"),
                align='left'),
    cells=dict(values=df_catering.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=15, color="black"),
               align='left'))
])
# Add fig_subure title
fig_catering.update_layout(
    title_text="Total Revenue Earned by Indian Railways Catering and Tourism Corporation (IRCTC) Food/Beverages Sale from 2019-20 to 2021-22"
)
st.plotly_chart(fig_catering)


############################################################################################
st.subheader("#Ô∏è‚É£Revenue on Account of Flexi Fare, Premium Tatkal and Tatkalüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Year-wise Amount of Increase in Revenue on Account of Flexi Fare, Premium Tatkal and Tatkal from 2018-19 to 2022-23üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

df_tatkal=pd.read_csv(f'datasets/finan/Year-wise Amount of Increase in Revenue on Account of Flexi Fare, Premium Tatkal and Tatkal from 2018-19 to 2022-23.csv')


fig_tatkal = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_tatkal.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=15, color="black"),
                align='left'),
    cells=dict(values=df_tatkal.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=15, color="black"),
               align='left'))
])
# Add fig_subure title
fig_tatkal.update_layout(
    title_text="Increase in Revenue Flexi Fare, Premium Tatkal and Tatkal 2018-23"
)
st.plotly_chart(fig_tatkal)



############################################################################################
st.subheader("#Ô∏è‚É£Revenue Generated from the Passenger Fares and Freight Charges of Indian Railwaysüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Year-wise Revenue Generated from the Passenger Fares and Freight Charges of Indian Railways from 2017-18 to 2022-23üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")


df_Charges=pd.read_csv(f'datasets/finan/Year-wise Revenue Generated from the Passenger Fares and Freight Charges of Indian Railways from 2017-18 to 2022-23.csv')


fig_Charges = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_Charges.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=15, color="black"),
                align='left'),
    cells=dict(values=df_Charges.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=15, color="black"),
               align='left'))
])
# Add fig_subure title
fig_Charges.update_layout(
    title_text="Passenger Fares and Freight Charges of Indian Railways from 2017-23"
)
st.plotly_chart(fig_Charges)



############################################################################################
st.subheader("#Ô∏è‚É£Fare of Ordinary Passenger Trains vis a vis Express Trainsüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Basic Fare of Ordinary Passenger Trains vis a vis Express Trains Over Non-Suburban Sections for Different Distancesüìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")


df_diff_pri=pd.read_csv(f'datasets/finan/Basic Fare of Ordinary Passenger Trains vis a vis Express Trains Over Non-Suburban Sections for Different Distances (in reply to Unstarred Question on 23 July, 2021).csv')


fig_diff_pri = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_diff_pri.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=15, color="black"),
                align='left'),
    cells=dict(values=df_diff_pri.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=15, color="black"),
               align='left'))
])
# Add fig_subure title
fig_diff_pri.update_layout(
    title_text="Basic Fare of Ordinary Passenger Trains vs Express Trains "
)
st.plotly_chart(fig_diff_pri)



############################################################################################
st.subheader("#Ô∏è‚É£Details of the Base Fare of various type of Trainsüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Distance-wise Details of the Base Fare of various type of Trains for AC-I , AC-II and AC-IIIüìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

df_AC_x=pd.read_csv(f'datasets/finan/Distance-wise Details of the Base Fare of various type of Trains for AC-I , AC-II and AC-III.csv')

fig_AC_x = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_AC_x.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_AC_x.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_AC_x.update_layout(
    title_text="Distance-wise Details of the Base Fare Trains for AC-I AC-II AC-III "
)
st.plotly_chart(fig_AC_x)


############################################################################################
st.subheader("#Ô∏è‚É£Details of Passengers Travelled in AC Class and Sleeper Classüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Category-wise Details of Passengers Travelled in AC Class and Sleeper Class during 2022-23üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")


df_AC_p=pd.read_csv(f'datasets/finan/Category-wise Details of Passengers Travelled in AC Class and Sleeper Class during 2022-23.csv')

fig_AC_P = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_AC_p.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_AC_p.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_AC_P.update_layout(
    title_text="Category-wise Passengers Travelled AC Class/Sleeper Class during 2022-23"
)
st.plotly_chart(fig_AC_P)


############################################################################################

st.subheader("#Ô∏è‚É£Total Number of Passengers who Travelled in AC Classüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Year-wise Total Number of Passengers who Travelled in AC Class from 2020-21 to 2022-23üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

df_AC_pac=pd.read_csv(f'datasets/finan/Year-wise Total Number of Passengers who Travelled in AC Class from 2020-21 to 2022-23.csv')

fig_AC_PAC = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_AC_pac.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_AC_pac.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_AC_PAC.update_layout(
    title_text="Year-wise Total Number of Passengers who Travelled AC Class 2020-23"
)
st.plotly_chart(fig_AC_PAC)



############################################################################################
st.subheader("#Ô∏è‚É£Financial Performance of SRTUsüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£Financial Performance of SRTUs at a Glance from 2011-12 to 2015-16üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
df_pft=pd.read_csv(f'datasets/finan/Financial Performance of SRTUs at a Glance from 2011-12 to 2015-16.csv')

STRU_list=list(df_pft['Name of State Road Transport Undertaking (SRTU)'].unique())



cat_sel_STRU1116=st.selectbox("STRU Name",STRU_list,placeholder="Select a Option to Display Data",index=STRU_list.index('Total (Reporting SRTUs)'))

df_pft_rev=df_pft[['Name of State Road Transport Undertaking (SRTU)',
       'Total Revenue (Rs. Lakh) - 2011-12',
       'Total Revenue (Rs. Lakh) - 2012-13',
       'Total Revenue (Rs. Lakh) - 2013-14',
       'Total Revenue (Rs. Lakh) - 2014-15',
       'Total Revenue (Rs. Lakh) - 2015-16']]

df_pft_cost=df_pft[['Name of State Road Transport Undertaking (SRTU)','Total Cost (Rs. Lakh) - 2011-12',
       'Total Cost (Rs. Lakh) - 2012-13', 'Total Cost (Rs. Lakh) - 2013-14',
       'Total Cost (Rs. Lakh) - 2014-15', 'Total Cost (Rs. Lakh) - 2015-16']]

df_pft_PL=df_pft[['Name of State Road Transport Undertaking (SRTU)','Net Profit/Loss (Rs. Lakh) - 2011-12',
       'Net Profit/Loss (Rs. Lakh) - 2012-13',
       'Net Profit/Loss (Rs. Lakh) - 2013-14',
       'Net Profit/Loss (Rs. Lakh) - 2014-15',
       'Net Profit/Loss (Rs. Lakh) - 2015-16']]


df_pft_revSTRU=df_pft_rev[df_pft_rev['Name of State Road Transport Undertaking (SRTU)']==cat_sel_STRU1116]

df_pft_costSTRU=df_pft_cost[df_pft_cost['Name of State Road Transport Undertaking (SRTU)']==cat_sel_STRU1116]

df_pft_PLSTRU=df_pft_PL[df_pft_PL['Name of State Road Transport Undertaking (SRTU)']==cat_sel_STRU1116]

#-----------------------------------------------------------------------------------

fig_pft_revSTRU = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_pft_revSTRU.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_pft_revSTRU.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_pft_revSTRU.update_layout(
    title_text="Revenue-from 2011-12 to 2015-16"
)
st.plotly_chart(fig_pft_revSTRU)

#-----------------------------------------------------------------------------------
fig_pft_costSTRU = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_pft_costSTRU.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_pft_costSTRU.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_pft_costSTRU.update_layout(
    title_text="Cost-from 2011-12 to 2015-16"
)
st.plotly_chart(fig_pft_costSTRU)

#-----------------------------------------------------------------------------------


fig_pft_PLSTRU = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_pft_PLSTRU.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_pft_PLSTRU.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_pft_PLSTRU.update_layout(
    title_text="Loss-from 2011-12 to 2015-16"
)
st.plotly_chart(fig_pft_PLSTRU)


############################################################################################
st.subheader("#Ô∏è‚É£SRTUs wise financial performance of SRTUsüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£SRTUs wise financial performance of SRTUs At A Glance from 2016-17 to 2018-19üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
df_pft1619=pd.read_csv(f'datasets/finan/SRTUs wise financial performance of SRTUs At A Glance from 2016-17 to 2018-19.csv')
STRU1619_list=df_pft1619['Name of State Road Transport Undertaking (SRTU)'].unique()

cat_sel_STRU1619=st.selectbox("STRU Name",list(STRU1619_list),placeholder="Select a Option to Display Data")

df_pft1619_rev=df_pft1619[['S. No.', 'Name of State Road Transport Undertaking (SRTU)',
       'Total Revenue (Rs. Lakh) - 2016-17',
       'Total Revenue (Rs. Lakh) - 2017-18',
       'Total Revenue (Rs. Lakh) - 2018-19']]

df_pft1619_cost=df_pft1619[['S. No.', 'Name of State Road Transport Undertaking (SRTU)',
       'Total Cost (Rs. Lakh) - 2016-17',
       'Total Cost (Rs. Lakh) - 2017-18', 'Total Cost (Rs. Lakh) - 2018-19']]

df_pft1619_PL=df_pft1619[['S. No.', 'Name of State Road Transport Undertaking (SRTU)',
       'Net Profit/Loss (Rs. Lakh) - 2016-17',
       'Net Profit/Loss (Rs. Lakh) - 2017-18',
       'Net Profit/Loss (Rs. Lakh) - 2018-19']]

df_pft1619_revSRTU=df_pft1619_rev[df_pft1619_rev['Name of State Road Transport Undertaking (SRTU)']==cat_sel_STRU1619]
df_pft1619_costSRTU=df_pft1619_cost[df_pft1619_cost['Name of State Road Transport Undertaking (SRTU)']==cat_sel_STRU1619]
df_pft1619_PLSRTU=df_pft1619_PL[df_pft1619_PL['Name of State Road Transport Undertaking (SRTU)']==cat_sel_STRU1619]

#-----------------------------------------------------------------------------------

fig_pft1619_revSRTU = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_pft1619_revSRTU.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_pft1619_revSRTU.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_pft1619_revSRTU.update_layout(
    title_text="Revenue-from 2016-17 to 2018-19"
)
st.plotly_chart(fig_pft1619_revSRTU)


#-----------------------------------------------------------------------------------



fig_pft1619_costSRTU = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_pft1619_costSRTU.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_pft1619_costSRTU.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_pft1619_costSRTU.update_layout(
    title_text="Revenue-from 2016-17 to 2018-19"
)
st.plotly_chart(fig_pft1619_costSRTU)


#-----------------------------------------------------------------------------------


fig_pft1619_PLSRTU = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_pft1619_PLSRTU.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_pft1619_PLSRTU.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_pft1619_PLSRTU.update_layout(
    title_text="Revenue-from 2016-17 to 2018-19"
)
st.plotly_chart(fig_pft1619_PLSRTU)


############################################################################################
st.subheader("#Ô∏è‚É£SRTUs wise financial performance of SRTUsüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£SRTUs wise financial performance of SRTUs At A Glance from 2016-17 to 2018-19üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

df_pft1719=pd.read_csv(f'datasets/finan/SRTUs wise ProfitLoss of SRTUs for the years ending March 2017, 2018 and 2019.csv')


df_pft1719_rev=df_pft1719[['Name of State Road Transport Undertaking (SRTU)',
       'Total Revenue (Rs. Lakh) - 2018-19',
       'Total Revenue (Rs. Lakh) - 2017-18',
       'Total Revenue (Rs. Lakh) - 2016-17']]

df_pft1719_cost=df_pft1719[['Name of State Road Transport Undertaking (SRTU)','Total Cost (Rs. Lakh) - 2018-19',
       'Total Cost (Rs. Lakh) - 2017-18', 'Total Cost (Rs. Lakh) - 2016-17']]

df_pft1719_PL=df_pft1719[['Name of State Road Transport Undertaking (SRTU)','Net Profit/Loss (Rs. Lakh) - 2018-19',
       'Net Profit/Loss (Rs. Lakh) - 2017-18',
       'Net Profit/Loss (Rs. Lakh) - 2016-17']]

df_pft1719_PBT=df_pft1719[['Name of State Road Transport Undertaking (SRTU)','Profit before Tax (Rs. Lakh) - 2018-19',
       'Profit before Tax (Rs. Lakh) - 2017-18',
       'Profit before Tax (Rs. Lakh) - 2016-17']]


STRU1719_list=df_pft1719['Name of State Road Transport Undertaking (SRTU)'].unique()

cat_sel_STRU1719=st.selectbox("STRU Name",list(STRU1719_list),placeholder="Select a Option to Display Data",key="STRU1719")



df_pft1719_revSRTU=df_pft1719_rev[df_pft1719_rev['Name of State Road Transport Undertaking (SRTU)']==cat_sel_STRU1719]
df_pft1719_costSRTU=df_pft1719_cost[df_pft1719_cost['Name of State Road Transport Undertaking (SRTU)']==cat_sel_STRU1719]
df_pft1719_PLSRTU=df_pft1719_PL[df_pft1719_PL['Name of State Road Transport Undertaking (SRTU)']==cat_sel_STRU1719]
df_pft1719_PBTSRTU=df_pft1719_PBT[df_pft1719_PBT['Name of State Road Transport Undertaking (SRTU)']==cat_sel_STRU1719]




#-----------------------------------------------------------------------------------

fig_pft1719_revSRTU = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_pft1719_revSRTU.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_pft1719_revSRTU.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_pft1719_revSRTU.update_layout(
    title_text="SRTUs wise Revenue 2017, 2018 and 2019"
)
st.plotly_chart(fig_pft1719_revSRTU)


#-----------------------------------------------------------------------------------



fig_pft1719_costSRTU = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_pft1719_costSRTU.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_pft1719_costSRTU.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_pft1719_costSRTU.update_layout(
    title_text="SRTUs wise Cost 2017, 2018 and 2019"
)
st.plotly_chart(fig_pft1719_costSRTU)


#-----------------------------------------------------------------------------------


fig_pft1719_PLSRTU = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_pft1719_PLSRTU.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_pft1719_PLSRTU.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_pft1719_PLSRTU.update_layout(
    title_text="SRTUs wise Profit/Loss 2017, 2018 and 2019"
)
st.plotly_chart(fig_pft1719_PLSRTU)


#-----------------------------------------------------------------------------------


fig_pft1719_PBTSRTU = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_pft1719_PBTSRTU.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_pft1719_PBTSRTU.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_pft1719_PBTSRTU.update_layout(
    title_text="SRTUs wise Profir Before Tax 2017, 2018 and 2019"
)
st.plotly_chart(fig_pft1719_PBTSRTU)



############################################################################################
st.subheader("#Ô∏è‚É£Capital & Liabilities of SRTUüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£SRTUs wise Capital & Liabilities of SRTUs for the years ending March 2017, 2018 and 2019üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
df_CL=pd.read_excel(f'datasets/finan/SRTUs wise Capital & Liabilities of SRTUs for the years ending March 2017, 2018 and 2019.xlsx',sheet_name='SRTUs wise Capital & Liabilitie')

df_CL_grp=pd.read_excel(f'datasets/finan/SRTUs wise Capital & Liabilities of SRTUs for the years ending March 2017, 2018 and 2019.xlsx',sheet_name='Sheet1')


CL_grp=df_CL_grp.groupby('Group')['S. No.'].apply(list).reset_index(name='Items')

CL_grp.set_index('Group', inplace=True)
dct = CL_grp.T.to_dict()


CL_grp_items=list(df_CL_grp['Group'].unique())



CL_grp=st.selectbox("Finance Parameter Group",CL_grp_items,placeholder="Select a Option to Display Data")

CL_grp_items_col=dct[CL_grp]['Items']
CL_grp_items_col.insert(0,'Name of State Road Transport Undertaking (SRTU)')
df_CL_display=df_CL[CL_grp_items_col]



fig_CL_display = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_CL_display.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_CL_display.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_CL_display.update_layout(
    title_text="Capital & Liabilities of SRTUs"
)
st.plotly_chart(fig_CL_display)



############################################################################################
st.subheader("#Ô∏è‚É£Financial performance of SRTUsüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£SRTUs wise financial performance of SRTUs for the years ending March 2017, 2018 and 2019üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

df_FPL=pd.read_excel(f'datasets/finan/SRTUs wise financial performance of SRTUs for the years ending March 2017, 2018 and 2019.xlsx',sheet_name='SRTUs wise financial performanc')
df_FPL_grp=pd.read_excel(f'datasets/finan/SRTUs wise financial performance of SRTUs for the years ending March 2017, 2018 and 2019.xlsx',sheet_name='Group')


FPL_grp=df_FPL_grp.groupby('Group')['S. No.'].apply(list).reset_index(name='Items')
FPL_grp.set_index('Group', inplace=True)
dctFPL = FPL_grp.T.to_dict()

FPL_grp_items=list(df_FPL_grp['Group'].unique())


FPL_grp=st.selectbox("Finance Parameter Group",FPL_grp_items,placeholder="Select a Option to Display Data")

FPL_grp_items_col=dctFPL[FPL_grp]['Items']
FPL_grp_items_col.insert(0,'Name of State Road Transport Undertaking (SRTU)')
df_FPL_display=df_FPL[FPL_grp_items_col]



fig_FPL_display = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_FPL_display.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_FPL_display.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_FPL_display.update_layout(
    title_text="SRTUs wise financial performance of SRTU"
)
st.plotly_chart(fig_FPL_display)



############################################################################################
st.subheader("#Ô∏è‚É£Financial Ratios of SRTUüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£SRTUs wise key Financial Ratios of SRTUs for the years ending March 2017, 2018 and 2019üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

df_FR=pd.read_excel(f'datasets/finan/SRTUs wise key Financial Ratios of SRTUs for the years ending March 2017, 2018 and 2019.xlsx',sheet_name='SRTUs wise key Financial Ratios')
df_FR_grp=pd.read_excel(f'datasets/finan/SRTUs wise key Financial Ratios of SRTUs for the years ending March 2017, 2018 and 2019.xlsx',sheet_name='Group')


FR_grp=df_FR_grp.groupby('Group')['S. No.'].apply(list).reset_index(name='Items')
FR_grp.set_index('Group', inplace=True)
dctFR = FR_grp.T.to_dict()

FR_grp_items=list(df_FR_grp['Group'].unique())


FR_grp=st.selectbox("Finance Parameter Group",FR_grp_items,placeholder="Select a Option to Display Data")

FR_grp_items_col=dctFR[FR_grp]['Items']
FR_grp_items_col.insert(0,'Name of State Road Transport Undertaking (SRTU)')
df_FR_display=df_FR[FR_grp_items_col]



fig_FR_display = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_FR_display.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_FR_display.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_FR_display.update_layout(
    title_text="SRTUs wise Financial Ratios of SRTU"
)
st.plotly_chart(fig_FR_display)

############################################################################################

st.subheader("#Ô∏è‚É£Number of Challans, Collection of Fines Penaltyüìå ", divider="gray")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")
st.write("#Ô∏è‚É£StateUT-wise Number of Challans, Collection of Fines Penalty and Pending Amount on Highways and Expressways across the Country from 2018 to 2022üìå ")
st.write("#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£")

df_Fines=pd.read_excel(f'datasets/finan/StateUT-wise Number of Challans, Collection of Fines Penalty and Pending Amount on Highways and Expressways across the Country from 2018 to 2022.xlsx',sheet_name='StateUT-wise Number of Challans')
df_Fines_grp=pd.read_excel(f'datasets/finan/StateUT-wise Number of Challans, Collection of Fines Penalty and Pending Amount on Highways and Expressways across the Country from 2018 to 2022.xlsx',sheet_name='Group')


Fines_grp=df_Fines_grp.groupby('Group')['Sl. No.'].apply(list).reset_index(name='Items')
Fines_grp.set_index('Group', inplace=True)
dctFines = Fines_grp.T.to_dict()

Fines_grp_items=list(df_Fines_grp['Group'].unique())


Fines_grp=st.selectbox("Finance Parameter Group",Fines_grp_items,placeholder="Select a Option to Display Data")

Fines_grp_items_col=dctFines[Fines_grp]['Items']
Fines_grp_items_col.insert(0,'State/UT')
df_Fines_display=df_Fines[Fines_grp_items_col]



fig_Fines_display = go.Figure(data=[go.Table(
    
    columnwidth = [700,600,600,600,600,600],
    header=dict(values=list(df_Fines_display.columns),
                fill_color='darkturquoise',
                # fill_color='#b9e2ff',
                line_color='darkslategray',
                font = dict(family="Arial", size=10, color="black"),
                align='left'),
    cells=dict(values=df_Fines_display.transpose().values.tolist(),
               fill_color='lightgray',
                font = dict(family="Arial", size=10, color="black"),
               align='left'))
])
# Add fig_subure title
fig_Fines_display.update_layout(
    title_text="Challans,Fines, Penalty and Pending Amount on Highways/Expressways"
)
st.plotly_chart(fig_Fines_display)

